

****MOVIDA DIAPO 27 SESION 1****
<Resource name="jdbc/ProcessEngine"
auth="Container"
type="javax.sql.DataSource"
factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
uniqueResourceName="process-engine"
driverClassName="com.mysql.jdbc.Driver"
url="jdbc:mysql://localhost:3306/camundabpm?useSSL=false"
username="camundabpm"
password="root"
maxPoolSize="20"
minPoolSize="5" />

****MOVIDA DIAPO 8 SESION 2****
<dependencyManagement>
<dependencies>
<dependency>
<groupId>org.camunda.bpm</groupId>
<artifactId>camunda-bom</artifactId>
<version>7.10.0</version>
<scope>import</scope>
<type>pom</type>
</dependency>
</dependencies>
</dependencyManagement>


****MOVIDA DIAPO 9 SESION 2****

****MOVIDA DIAPO 18 SESION 2****
<?xml version="1.0" encoding="UTF-8" ?>
<process-application
xmlns="http://www.camunda.org/schema/1.0/ProcessApplication"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<process-archive name="Pizzeria">
<process-engine>default</process-engine>
<properties>
<property name="isDeleteUponUndeploy">false</property>
<property name="isScanForProcessDefinitions">true</property>
</properties>
</process-archive>
</process-application>







****SCRIPT****

out:print "Validando pedido de pizzas para: " +
IDNombre + "\n";
	if(IDCantidad > 10){
		razonRechazo = "Demasiada
cantidad: " + IDCantidad + "de pizzas";
		pedidoValido = false;
		} else { pedidoValido = true;
			}
 out:print "El pedido de pizas validado con
resultado " + pedidoValido + "\n";
 if(pedidoValido == false) { out:print "La razón
del rechazo es " + razonRechazo + "\n"; }
else { out:print IDCantidad + " " +
IDNombrePizza + " pizzas van al horno\n"; }
execution.setVariable("PedidoValido",
pedidoValido);

****MOVIDA DIAPO 30 SESION 2****
package libreria.iei;
import org.camunda.bpm.engine.delegate.DelegateExecution;
import org.camunda.bpm.engine.delegate.JavaDelegate;
public class CalcularPrecio implements JavaDelegate {
@Override
public void execute(DelegateExecution execution) throws Exception {
// TODO Auto‐generated method stub
String NombrePizza = (String) execution.getVariable("IDNombrePizza");
// accede a la variable IDNombrePizza, el método devuelve un Object, se realiza un casting
// Si la variable no está en el motor devolverá null
int cantidad = ((Number) execution.getVariable("IDCantidad")).intValue();
System.out.println("Calculando el precio de " + cantidad + " " + NombrePizza + "pizzas");
double precio = 0.0;
if("margarita".equalsIgnoreCase(NombrePizza)) { precio = cantidad * 6.0; }
else { precio = cantidad * 8.0; }
System.out.println("El precio será " + precio);
execution.setVariable("IDPrecio", precio); // Pone un valor double en el motor
}
}



****MOVIDA DIAPO 35 SESION 2****
<dependency>
<groupId>org.twitter4j</groupId>
<artifactId>twitter4j‐core</artifactId>
<version>4.0.7</version>
</dependency>


****MOVIDA DIAPOS 43/44 SESION 2****
package libreria.iei;
import org.camunda.bpm.engine.delegate.DelegateExecution;
import org.camunda.bpm.engine.delegate.JavaDelegate;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;

class EnviarTweet implements JavaDelegate {
@Override
public void execute(DelegateExecution execution) throws Exception {
// TODO Auto-enerated method stub
String nombreCliente = (String) execution.getVariable("IDNombre);
int cantidad = ((Number) execution.getVariable("IDCantidad")).intValue();
String pizza = (String) execution.getVariable("IDNombrePizza");
double precio = (Double) execution.getVariable("IDPrecio");
String entrega = (String) execution.getVariable("IDEntrega");
String consumerKey = "NgjOsnff93lOKiOoeAVfg";
String consumerSecret = "cWoyHLt0HaVo8nNdUFTkh27AkKWbEwK9PUQj8onJHQ";
String accessToken = "1294686434-bpr3iOWwaisgQCxG2Uuhh5safHtWbNwS8jRxOHS";
String accessTokenSecret = "1dx1MBOIvjRUWzszKgN90CS5wECZaJOpKG00lD6HOJs";
ConfigurationBuilder cb = new ConfigurationBuilder();
cb.setDebugEnabled(true).setOAuthConsumerKey(consumerKey)
.setOAuthConsumerSecret(consumerSecret).setOAuthAccessToken(accessToken)
.setOAuthAccessTokenSecret(accessTokenSecret);
TwitterFactory tf = new TwitterFactory(cb.build());
Twitter twitter = tf.getInstance();
try {
twitter.updateStatus("#El motor de Camunda ha creado un pedido de pizza: " +
nombreCliente + " pedidas " + cantidad + " de " + pizza );
twitter.updateStatus("La pizza es/son de " + pizza + " y el importe es: " +
precio + " euro(s) y serán entregadas en " + entrega + " minutos");
} catch (TwitterException e) { e.printStackTrace();}
}
}



